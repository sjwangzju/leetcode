package Dropbox;

import java.util.Collections;
import java.util.List;

public class MalwareDefender {

    public int[] find(List<List<Integer>> matrix, List<Integer> infected) {
        int len = matrix.size();
        int[] parent = new int[len];
        int[] siz = new int[len];

        for (int i = 0; i < len; i++) {
            parent[i] = i;
            siz[i] = 1;
        }

        for (int i = 0; i < matrix.size(); i++) {
            for (int j = i + 1; j < matrix.get(0).size(); j++) {
                if (matrix.get(i).get(j) == 1) {
                    int p1 = findParent(i, parent);
                    int p2 = findParent(j, parent);
                    if (p1 != p2) {
                        parent[p2] = p1;
                        siz[p1] += siz[p2];
                    }
                }
            }
        }

        int[] infectedNum = new int[len];
        for (int n: infected) {
            infectedNum[findParent(n, parent)]++;
        }

        Collections.sort(infected);
        int max = 0;
        int res = infected.get(0);

        for (int i = infected.size() - 1; i >= 0; i--) {
            int p = findParent(infected.get(i), parent);
            if (infectedNum[p] == 1 && siz[p] >= max) {
                max = siz[p];
                res = infected.get(i);
            }
        }

        return new int[]{res, max};
    }


    public int findParent(int i, int[] parent) {
        while (i != parent[i]) {
            i = parent[i];
        }
        return i;
    }


}
